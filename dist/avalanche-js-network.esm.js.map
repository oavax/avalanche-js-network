{"version":3,"file":"avalanche-js-network.esm.js","sources":["../src/types.ts","../src/providers/baseProvider.ts","../src/providers/baseSocket.ts","../src/providers/defaultFetcher.ts","../src/rpcMethod/net.ts","../src/providers/http.ts","../src/rpcMethod/builder.ts","../src/providers/ws.ts","../src/providers/emitter.ts","../src/providers/provider.ts","../src/messenger/responseMiddleware.ts","../src/rpcMethod/rpc.ts","../src/messenger/messenger.ts","../src/tracker/baseTracker.ts","../src/tracker/pollingTracker.ts","../src/tracker/subscribeTracker.ts","../src/subscriptions/Subscription.ts","../src/subscriptions/LogSub.ts","../src/subscriptions/NewHeadersSub.ts","../src/subscriptions/NewPendingTransactionsSub.ts","../src/subscriptions/SyncingSub.ts","../src/util.ts"],"sourcesContent":["/**\n * @packageDocumentation\n * @module avalanche-network\n * @ignore\n */\n\nimport { RPCMethod, RPCErrorCode } from './rpcMethod/rpc';\n\nexport type ReqMiddleware = Map<string | RPCMethod | RegExp, any[]>;\nexport type ResMiddleware = Map<string | RPCMethod | RegExp, any[]>;\n\nexport enum MiddlewareType {\n  REQ,\n  RES,\n}\n\nexport enum SubscribeReturns {\n  all = 'all',\n  id = 'id',\n  method = 'method',\n}\n\nexport interface Middleware {\n  request: object;\n  response: object;\n}\n\nexport interface RPCRequestPayload<T> {\n  id: number;\n  jsonrpc: string;\n  method: RPCMethod | string;\n  params: T;\n}\n\nexport interface RPCRequestOptions {\n  headers: [];\n  method: string;\n}\n\nexport interface RPCRequest<T> {\n  url: string;\n  payload: RPCRequestPayload<T>;\n  options: RPCRequestOptions;\n}\n\nexport interface RPCResponseBase {\n  jsonrpc: string;\n  id: string;\n}\n\nexport interface RPCResponseBody<R, E> extends RPCResponseBase {\n  result: R;\n  error: E;\n}\n\nexport interface RPCError {\n  code: RPCErrorCode;\n  message: string;\n  data: any;\n}\n\nexport interface RPCResult {\n  resultString: string;\n  resultMap: Map<string, any>;\n  resultList: any[];\n  raw: any;\n}\n\nexport interface ShardingItem {\n  current: boolean;\n  shardID: number | string;\n  http: string;\n  ws: string;\n}\n","/**\n * @packageDocumentation\n * @module avalanche-network\n * @hidden\n */\n\nimport { ReqMiddleware, ResMiddleware, MiddlewareType } from '../types';\nimport { RPCMethod } from '../rpcMethod/rpc';\n\nclass BaseProvider {\n  middlewares = {\n    request: {\n      use: (fn: ReqMiddleware, match: string | RPCMethod | RegExp = '*') => {\n        this.pushMiddleware(fn, MiddlewareType.REQ, match);\n      },\n    },\n    response: {\n      use: (fn: ResMiddleware, match: string | RPCMethod | RegExp = '*') => {\n        this.pushMiddleware(fn, MiddlewareType.RES, match);\n      },\n    },\n  };\n  protected url: string;\n  protected reqMiddleware: ReqMiddleware = new Map().set('*', []);\n  protected resMiddleware: ResMiddleware = new Map().set('*', []);\n\n  constructor(\n    url: string,\n    reqMiddleware: ReqMiddleware = new Map(),\n    resMiddleware: ResMiddleware = new Map(),\n  ) {\n    this.reqMiddleware = reqMiddleware;\n    this.resMiddleware = resMiddleware;\n    this.url = url;\n  }\n\n  protected pushMiddleware(fn: any, type: MiddlewareType, match: string | RPCMethod | RegExp) {\n    if (type !== MiddlewareType.REQ && type !== MiddlewareType.RES) {\n      throw new Error('Please specify the type of middleware being added');\n    }\n    if (type === MiddlewareType.REQ) {\n      const current = this.reqMiddleware.get(match) || [];\n      this.reqMiddleware.set(match, [...current, <ReqMiddleware>fn]);\n    } else {\n      const current = this.resMiddleware.get(match) || [];\n      this.resMiddleware.set(match, [...current, <ResMiddleware>fn]);\n    }\n  }\n  protected getMiddleware(method: RPCMethod | string): [ReqMiddleware[], ResMiddleware[]] {\n    const requests: ReqMiddleware[] = [];\n    const responses: ResMiddleware[] = [];\n\n    for (const [key, transformers] of this.reqMiddleware.entries()) {\n      if (typeof key === 'string' && key !== '*' && key === method) {\n        requests.push(...transformers);\n      }\n\n      if (key instanceof RegExp && key.test(method)) {\n        requests.push(...transformers);\n      }\n\n      if (key === '*') {\n        requests.push(...transformers);\n      }\n    }\n\n    for (const [key, transformers] of this.resMiddleware.entries()) {\n      if (typeof key === 'string' && key !== '*' && key === method) {\n        responses.push(...transformers);\n      }\n\n      if (key instanceof RegExp && key.test(method)) {\n        responses.push(...transformers);\n      }\n\n      if (key === '*') {\n        responses.push(...transformers);\n      }\n    }\n\n    return [requests, responses];\n  }\n}\n\nexport { BaseProvider };\n","/**\n * @packageDocumentation\n * @module avalanche-network\n * @hidden\n */\n\nimport { isWs } from 'avalanche-js-utils';\nimport mitt from 'mitt';\nimport { BaseProvider } from './baseProvider';\n\nexport enum SocketConnection {\n  READY = 'ready',\n  CONNECT = 'connect',\n  ERROR = 'error',\n  CLOSE = 'close',\n}\n\nexport enum SocketState {\n  SOCKET_MESSAGE = 'socket_message',\n  SOCKET_READY = 'socket_ready',\n  SOCKET_CLOSE = 'socket_close',\n  SOCKET_ERROR = 'socket_error',\n  SOCKET_CONNECT = 'socket_connect',\n  SOCKET_NETWORK_CHANGED = 'socket_networkChanged',\n  SOCKET_ACCOUNTS_CHANGED = 'socket_accountsChanged',\n}\n\nexport enum EmittType {\n  INSTANCE = 'instance',\n  PUBSUB = 'pubsub',\n}\n\nclass BaseSocket extends BaseProvider {\n  url: string;\n  emitter: mitt.Emitter;\n  handlers: any = {};\n  constructor(url: string) {\n    super(url);\n    if (!isWs(url)) {\n      throw new Error(`${url} is not websocket`);\n    }\n    this.url = url;\n    this.emitter = mitt(this.handlers);\n  }\n  resetHandlers() {\n    // tslint:disable-next-line: forin\n    for (const i in this.handlers) {\n      delete this.handlers[i];\n    }\n  }\n\n  once(type: string, handler: mitt.Handler) {\n    this.emitter.on(type, handler);\n    this.removeEventListener(type);\n  }\n\n  addEventListener(type: string, handler: mitt.Handler) {\n    this.emitter.on(type, handler);\n  }\n\n  removeEventListener(type?: string, handler?: mitt.Handler) {\n    if (!type) {\n      this.handlers = {};\n      return;\n    }\n    if (!handler) {\n      delete this.handlers[type];\n    } else {\n      return this.emitter.off(type, handler);\n    }\n  }\n  reset() {\n    this.removeEventListener('*');\n    // this.registerEventListeners();\n  }\n  removeAllSocketListeners() {\n    this.removeEventListener(SocketState.SOCKET_MESSAGE);\n    this.removeEventListener(SocketState.SOCKET_READY);\n    this.removeEventListener(SocketState.SOCKET_CLOSE);\n    this.removeEventListener(SocketState.SOCKET_ERROR);\n    this.removeEventListener(SocketState.SOCKET_CONNECT);\n  }\n\n  onReady(event: any) {\n    this.emitter.emit(SocketConnection.READY, event);\n    this.emitter.emit(SocketState.SOCKET_READY, event);\n  }\n  onError(error: any) {\n    this.emitter.emit(SocketConnection.ERROR, error);\n    this.emitter.emit(SocketState.SOCKET_ERROR, error);\n    this.removeAllSocketListeners();\n    this.removeEventListener('*');\n  }\n  onClose(error = null) {\n    this.emitter.emit(SocketConnection.CLOSE, error);\n    this.emitter.emit(SocketState.SOCKET_CLOSE, error);\n    this.removeAllSocketListeners();\n    this.removeEventListener('*');\n  }\n}\n\nexport { BaseSocket };\n","/**\n * @packageDocumentation\n * @module avalanche-network\n * @hidden\n */\n\nimport fetch from 'cross-fetch';\nimport { RPCRequest, RPCResponseBody, RPCError, RPCResult } from '../types';\n\nexport const fetchRPC = {\n  requestHandler: (request: RPCRequest<any[]>, headers: any) =>\n    fetch(request.url, {\n      method: request.options && request.options.method ? request.options.method : 'POST',\n      cache: 'no-cache',\n      mode: 'cors',\n      redirect: 'follow',\n      referrer: 'no-referrer',\n      body: JSON.stringify(request.payload),\n      headers: {\n        ...headers,\n        ...(request.options && request.options.headers ? request.options.headers : {}),\n      },\n    }),\n  responseHandler: (response: Response, request: RPCRequest<any>, handler: any) =>\n    response\n      .json()\n      .then((body: RPCResponseBody<RPCResult, RPCError>) => {\n        return { ...body, req: request };\n      })\n      .then(handler),\n};\n","/**\n * @packageDocumentation\n * @module avalanche-network\n * @ignore\n */\n\nexport const DEFAULT_TIMEOUT: number = 120000;\n\nexport const DEFAULT_HEADERS: object = { 'Content-Type': 'application/json' };\n\nfunction _fetch(fetchPromise: Promise<any>, timeout: number) {\n  let abortFn: () => void;\n\n  const abortPromise = new Promise((resolve, reject) => {\n    abortFn = () => reject(new Error(`request Timeout in ${timeout} ms`));\n  });\n  const abortablePromise = Promise.race([fetchPromise, abortPromise]);\n\n  setTimeout(() => {\n    abortFn();\n  }, timeout);\n\n  return abortablePromise;\n}\n\nexport const performRPC = async (request: any, handler: any, fetcher: any) => {\n  try {\n    const response = await _fetch(\n      fetcher.requestHandler(request, DEFAULT_HEADERS),\n      request.options && request.options.timeout ? request.options.timeout : DEFAULT_TIMEOUT,\n    );\n    return fetcher.responseHandler(response, request, handler);\n  } catch (err) {\n    throw err;\n  }\n};\n\nexport function composeMiddleware(...fns: any[]): any {\n  if (fns.length === 0) {\n    return (arg: any) => arg;\n  }\n\n  if (fns.length === 1) {\n    return fns[0];\n  }\n\n  return fns.reduce((a, b) => (arg: any) => a(b(arg)));\n}\n","/**\n * @packageDocumentation\n * @module avalanche-network\n */\n\nimport { BaseProvider } from './baseProvider';\nimport { fetchRPC } from './defaultFetcher';\nimport { composeMiddleware, performRPC, DEFAULT_TIMEOUT, DEFAULT_HEADERS } from '../rpcMethod/net';\n\nimport { RPCRequestPayload } from '../types';\n\n/** @hidden */\nconst defaultOptions = {\n  method: 'POST',\n  timeout: DEFAULT_TIMEOUT,\n  headers: DEFAULT_HEADERS,\n  user: null,\n  password: null,\n};\n\nclass HttpProvider extends BaseProvider {\n  url: string;\n  fetcher?: any;\n  options?: any;\n  constructor(url: string, options?: any, fetcher?: any) {\n    super(url);\n    this.url = url || 'http://localhost:9500';\n    this.fetcher = fetcher || fetchRPC;\n    if (options) {\n      this.options = {\n        method: options.method || defaultOptions.method,\n        timeout: options.timeout || defaultOptions.timeout,\n        user: options.user || defaultOptions.user,\n        password: options.password || defaultOptions.password,\n        headers: options.headers || defaultOptions.headers,\n      };\n    } else {\n      this.options = defaultOptions;\n    }\n  }\n\n  /**\n   * @function send\n   * @memberof HttpProvider.prototype\n   * @param  {Object} payload  - payload object\n   * @param  {Function} callback - callback function\n   * @return {any} - RPC Response\n   */\n  send(payload: RPCRequestPayload<object>, callback?: any): Promise<any> {\n    return this.requestFunc({ payload, callback });\n  }\n\n  /**\n   * @function sendServer\n   * @memberof HttpProvider.prototype\n   * @param  {String} endpoint - endpoint to server\n   * @param  {Object} payload  - payload object\n   * @param  {Function} callback - callback function\n   * @return {Function} - RPC Response\n   */\n  sendServer(endpoint: string, payload: RPCRequestPayload<object>, callback: any): Promise<any> {\n    return this.requestFunc({ endpoint, payload, callback });\n  }\n\n  requestFunc({\n    endpoint,\n    payload,\n    callback,\n  }: {\n    endpoint?: string;\n    payload: RPCRequestPayload<object>;\n    callback?: any;\n  }): Promise<any> {\n    const [tReq, tRes] = this.getMiddleware(payload.method);\n    const reqMiddleware = composeMiddleware(\n      ...tReq,\n      (obj: object) => this.optionsHandler(obj),\n      (obj: object) => this.endpointHandler(obj, endpoint),\n      this.payloadHandler,\n    );\n    const resMiddleware = composeMiddleware(\n      (data: object) => this.callbackHandler(data, callback),\n      ...tRes,\n    );\n\n    const req = reqMiddleware(payload);\n\n    return performRPC(req, resMiddleware, this.fetcher);\n  }\n\n  /**\n   * @function payloadHandler\n   * @memberof HttpProvider.prototype\n   * @param  {Object} payload - payload object\n   * @return {Object} - to payload object\n   */\n  payloadHandler(payload: RPCRequestPayload<object>): object {\n    return { payload };\n  }\n\n  /**\n   * @function endpointHandler\n   * @memberof HttpProvider.prototype\n   * @param  {Object} obj      - payload object\n   * @param  {String} endpoint - add the endpoint to payload object\n   * @return {Object} - assign a new object\n   */\n  endpointHandler(obj: object, endpoint?: string): object {\n    return {\n      ...obj,\n      url: endpoint !== null && endpoint !== undefined ? `${this.url}${endpoint}` : this.url,\n    };\n  }\n\n  /**\n   * @function optionsHandler\n   * @memberof HttpProvider.prototype\n   * @param  {object} obj - options object\n   * @return {object} - assign a new option object\n   */\n  optionsHandler(obj: object): object {\n    if (this.options.user && this.options.password) {\n      const AUTH_TOKEN = `Basic ${Buffer.from(\n        `${this.options.user}:${this.options.password}`,\n      ).toString('base64')}`;\n      this.options.headers.Authorization = AUTH_TOKEN;\n    }\n\n    return { ...obj, options: this.options };\n  }\n\n  /**\n   * @function callbackHandler\n   * @memberof HttpProvider.prototype\n   * @param  {Object} data - from server\n   * @param  {Function} cb   - callback function\n   * @return {Object|Function} - return object or callback function\n   */\n  callbackHandler(data: any, cb: any): any {\n    if (cb) {\n      cb(null, data);\n    }\n    return data;\n  }\n\n  subscribe() {\n    throw new Error('HTTPProvider does not support subscriptions.');\n  }\n\n  unsubscribe() {\n    throw new Error('HTTPProvider does not support subscriptions.');\n  }\n}\n\nexport { HttpProvider };\n","/**\n * @packageDocumentation\n * @module avalanche-network\n * @hidden\n */\n\nimport { RPCRequestPayload } from '../types';\nimport { RPCMethod } from './rpc';\n/**\n * @class JsonRpc\n * @description json rpc instance\n * @return {JsonRpc} Json RPC instance\n */\nclass JsonRpc {\n  messageId: number;\n  constructor() {\n    /**\n     * @var {Number} messageId\n     * @memberof JsonRpc.prototype\n     * @description message id, default 0\n     */\n    this.messageId = 0;\n  }\n\n  /**\n   * @function toPayload\n   * @memberof JsonRpc.prototype\n   * @description convert method and params to payload object\n   * @param  {String} method - RPC method\n   * @param  {Array<object>} params - params that send to RPC\n   * @return {Object} payload object\n   */\n  toPayload = (\n    method: RPCMethod | string,\n    params: string | undefined | any[],\n  ): RPCRequestPayload<any> => {\n    // FIXME: error to be done by shared/errors\n    if (!method) {\n      throw new Error('jsonrpc method should be specified!');\n    }\n\n    // advance message ID\n    this.messageId += 1;\n\n    const sendParams =\n      params === undefined ? [] : typeof params === 'string' ? [params] : [...params];\n\n    return {\n      jsonrpc: '2.0',\n      id: this.messageId,\n      method,\n      params: sendParams,\n    };\n  };\n}\n\nexport { JsonRpc };\n","/**\n * @packageDocumentation\n * @module avalanche-network\n */\n\n// TODO: implement Websocket Provider\nimport { w3cwebsocket as W3CWebsocket } from 'websocket';\nimport {\n  BaseSocket,\n  SocketConnection,\n  SocketState,\n  // EmittType,\n} from './baseSocket';\nimport { isWs, isObject, isArray } from 'avalanche-js-utils';\nimport { JsonRpc } from '../rpcMethod/builder';\nimport { composeMiddleware } from '../rpcMethod/net';\nimport { RPCRequestPayload } from '../types';\n\nclass WSProvider extends BaseSocket {\n  get connected() {\n    return this.connection.readyState === this.connection.OPEN;\n  }\n\n  url: string;\n  subscriptions: any;\n  options: any;\n  connection: W3CWebsocket | WebSocket;\n  jsonRpc: JsonRpc;\n\n  // ws: w3cwebsocket;\n  constructor(url: string, options: any = {}) {\n    super(url);\n    if (!isWs(url)) {\n      throw new Error(`${url} is not websocket`);\n    }\n    this.url = url;\n    this.options = options;\n    this.connection = this.createWebsocketProvider(this.url, this.options);\n    this.jsonRpc = new JsonRpc();\n    this.subscriptions = {};\n    this.registerEventListeners();\n    // this.on = this.emitter.on.bind(this);\n  }\n\n  on(type: string, handler: mitt.Handler) {\n    this.emitter.on(type, handler);\n    return this;\n  }\n  onData(handler: any) {\n    this.emitter.on('data', handler);\n    return this;\n  }\n  onError(event: any) {\n    if (event.code === 'ECONNREFUSED') {\n      this.reconnect();\n      return;\n    }\n    super.onError(event);\n  }\n  onClose(closeEvent: any) {\n    if (closeEvent.code !== 1000 || closeEvent.wasClean === false) {\n      this.reconnect();\n      return;\n    }\n    super.onClose();\n  }\n\n  createWebsocketProvider(url: string, options: any = {}) {\n    // tslint:disable-next-line: no-string-literal\n    if (typeof window !== 'undefined' && (<any>window).WebSocket) {\n      // tslint:disable-next-line: no-string-literal\n      return new WebSocket(url, options.protocol);\n    } else {\n      const headers = options.headers || {};\n      const urlObject = new URL(url);\n\n      if (!headers.authorization && urlObject.username && urlObject.password) {\n        const authToken = Buffer.from(`${urlObject.username}:${urlObject.password}`).toString(\n          'base64',\n        );\n        headers.authorization = `Basic ${authToken}`;\n      }\n\n      return new W3CWebsocket(\n        url,\n        options.protocol,\n        undefined,\n        headers,\n        undefined,\n        options.clientConfig,\n      );\n    }\n  }\n\n  reconnect() {\n    setTimeout(() => {\n      this.removeAllSocketListeners();\n      this.connection = this.createWebsocketProvider(this.url, this.options);\n      this.registerEventListeners();\n    }, 5000);\n  }\n  isConnecting() {\n    return this.connection.readyState === this.connection.CONNECTING;\n  }\n\n  send(payload: RPCRequestPayload<object>): Promise<any> {\n    const [tReq, tRes] = this.getMiddleware(payload.method);\n    const reqMiddleware = composeMiddleware(...tReq);\n    const resMiddleware = composeMiddleware(...tRes);\n\n    return new Promise((resolve, reject) => {\n      // TODO: test on Error\n\n      if (this.connected) {\n        try {\n          this.connection.send(reqMiddleware(JSON.stringify(payload)));\n        } catch (error) {\n          // TODO !isConnecting then reconnect?\n          this.removeEventListener(SocketConnection.ERROR);\n          throw error;\n        }\n      }\n      this.emitter.on(SocketConnection.CONNECT, () => {\n        try {\n          this.connection.send(reqMiddleware(JSON.stringify(payload)));\n        } catch (error) {\n          // TODO !isConnecting then reconnect?\n          this.removeEventListener(SocketConnection.ERROR);\n          throw error;\n        }\n      });\n      this.emitter.on(`${payload.id}`, (data) => {\n        resolve(resMiddleware(data));\n        this.removeEventListener(`${payload.id}`);\n      });\n      this.emitter.on(SocketConnection.ERROR, reject);\n    });\n  }\n\n  async subscribe(payload: RPCRequestPayload<any[]>) {\n    const response = await this.send(payload);\n    const responseValidateResult = this.validate(response);\n    if (responseValidateResult instanceof Error) {\n      throw responseValidateResult;\n    }\n    this.subscriptions[response.result] = {\n      id: response.result,\n      subscribeMethod: payload.method,\n      parameters: payload.params,\n      payload,\n    };\n\n    return response.result;\n  }\n\n  async unsubscribe(payload: RPCRequestPayload<any[]>) {\n    const subscriptionId = payload.params[0];\n    if (this.hasSubscription(subscriptionId)) {\n      return this.send(payload).then((response) => {\n        if (response) {\n          this.removeEventListener(this.getSubscriptionEvent(subscriptionId));\n          delete this.subscriptions[subscriptionId];\n        }\n\n        return response;\n      });\n    }\n\n    return Promise.reject(\n      new Error(`Provider error: Subscription with ID ${subscriptionId} does not exist.`),\n    );\n  }\n\n  async clearSubscriptions(unsubscribeMethod: string) {\n    const unsubscribePromises: Array<Promise<any>> = [];\n\n    Object.keys(this.subscriptions).forEach((key) => {\n      this.removeEventListener(key);\n      unsubscribePromises.push(\n        this.unsubscribe(this.jsonRpc.toPayload(unsubscribeMethod, this.subscriptions[key].id)),\n      );\n    });\n\n    const results = await Promise.all(unsubscribePromises);\n    if (results.includes(false)) {\n      throw new Error(`Could not unsubscribe all subscriptions: ${JSON.stringify(results)}`);\n    }\n    return true;\n  }\n\n  registerEventListeners() {\n    this.connection.onmessage = this.onMessage.bind(this);\n    this.connection.onopen = this.onReady.bind(this);\n    this.connection.onopen = this.onConnect.bind(this);\n    this.connection.onclose = this.onClose.bind(this);\n    this.connection.onerror = this.onError.bind(this);\n  }\n\n  onMessage(msg: MessageEvent) {\n    if (msg && msg.data) {\n      let result;\n      let event;\n      try {\n        result = isObject(msg.data) ? msg.data : JSON.parse(msg.data);\n\n        if (isArray(result)) {\n          event = result[0].id;\n        }\n        // tslint:disable-next-line: prefer-conditional-expression\n        if (typeof result.id === 'undefined') {\n          event =\n            this.getSubscriptionEvent(result.params.subscription) || result.params.subscription;\n          // result = result.params;\n        } else {\n          event = result.id;\n        }\n      } catch (error) {\n        throw error;\n      }\n      this.emitter.emit(SocketState.SOCKET_MESSAGE, result);\n      this.emitter.emit(`${event}`, result);\n    } else {\n      throw new Error('provider error');\n    }\n  }\n  async onConnect() {\n    if (!this.subscriptions) {\n      this.subscriptions = {};\n    }\n    const subscriptionKeys = Object.keys(this.subscriptions);\n\n    if (subscriptionKeys.length > 0) {\n      for (const key of subscriptionKeys) {\n        const subscriptionId: any = await this.subscribe(this.subscriptions[key].payload);\n        delete this.subscriptions[subscriptionId];\n        this.subscriptions[key].id = subscriptionId;\n      }\n    }\n\n    this.emitter.emit(SocketState.SOCKET_CONNECT);\n    this.emitter.emit(SocketConnection.CONNECT);\n  }\n  getSubscriptionEvent(subscriptionId: any) {\n    if (this.subscriptions[subscriptionId]) {\n      return subscriptionId;\n    }\n\n    let event;\n    Object.keys(this.subscriptions).forEach((key) => {\n      if (this.subscriptions[key].id === subscriptionId) {\n        event = key;\n      }\n    });\n\n    return event;\n  }\n  hasSubscription(subscriptionId: string) {\n    return typeof this.getSubscriptionEvent(subscriptionId) !== 'undefined';\n  }\n  validate(response: any, payload?: any) {\n    if (isObject(response)) {\n      if (response.error) {\n        if (response.error instanceof Error) {\n          return new Error(`Node error: ${response.error.message}`);\n        }\n\n        return new Error(`Node error: ${JSON.stringify(response.error)}`);\n      }\n\n      if (payload && response.id !== payload.id) {\n        return new Error(\n          `Validation error: Invalid JSON-RPC response ID (request: ${payload.id} / response: ${response.id})`,\n        );\n      }\n\n      if (response.result === undefined) {\n        return new Error('Validation error: Undefined JSON-RPC result');\n      }\n\n      return true;\n    }\n\n    return new Error('Validation error: Response should be of type Object');\n  }\n}\n\nexport { WSProvider };\n","/**\n * @packageDocumentation\n * @module avalanche-network\n */\n\nimport mitt from 'mitt';\n\nclass Emitter {\n  handlers?: any = {};\n  emitter: mitt.Emitter;\n  off: (type: string, handler: mitt.Handler) => void;\n  emit: (type: string, event?: any) => void;\n  promise: Promise<{}>;\n  resolve?: any;\n  reject?: any;\n  then?: any;\n  constructor() {\n    this.emitter = mitt(this.handlers);\n    this.off = this.emitter.off.bind(this);\n    this.emit = this.emitter.emit.bind(this);\n    // tslint:disable-next-line: no-empty\n    this.promise = new Promise((resolve, reject) => {\n      this.resolve = resolve;\n      this.reject = reject;\n    });\n    this.then = this.promise.then.bind(this.promise);\n  }\n\n  resetHandlers() {\n    // tslint:disable-next-line: forin\n    for (const i in this.handlers) {\n      delete this.handlers[i];\n    }\n  }\n  on(type: string, handler: mitt.Handler) {\n    this.emitter.on(type, handler);\n    return this;\n  }\n  once(type: string, handler: mitt.Handler) {\n    this.emitter.on(type, (e: any) => {\n      handler(e);\n      this.removeEventListener(type);\n    });\n  }\n\n  addEventListener(type: string, handler: mitt.Handler) {\n    this.emitter.on(type, handler);\n  }\n\n  removeEventListener(type?: string, handler?: mitt.Handler) {\n    if (!type) {\n      this.handlers = {};\n      return;\n    }\n    if (!handler) {\n      delete this.handlers[type];\n    } else {\n      return this.emitter.off(type, handler);\n    }\n  }\n  onError(error: any) {\n    this.emitter.on('error', error);\n    this.removeEventListener('*');\n  }\n  onData(data: any) {\n    this.emitter.on('data', data);\n    this.removeEventListener('*');\n  }\n  listenerCount(listenKey: any) {\n    let count = 0;\n    Object.keys(this.handlers).forEach((val) => {\n      if (listenKey === val) {\n        count += 1;\n      }\n    });\n    return count;\n  }\n}\n\nexport { Emitter };\n","/**\n * @packageDocumentation\n * @module avalanche-network\n */\n\nimport { HttpProvider } from './http';\nimport { WSProvider } from './ws';\nimport { defaultConfig, isHttp, isWs } from 'avalanche-js-utils';\n\nexport enum ProviderType {\n  http = 'http',\n  ws = 'ws',\n}\n\nexport class Provider {\n  static getProvider(provider: string | HttpProvider | WSProvider) {\n    try {\n      this.getProvider(provider);\n      return new Provider(provider);\n    } catch (error) {\n      throw error;\n    }\n  }\n  public provider: WSProvider | HttpProvider;\n  public providerType: ProviderType;\n  constructor(url: string | WSProvider | HttpProvider) {\n    this.provider = this.onInitSetProvider(url);\n    this.providerType = this.getType(this.provider);\n  }\n  private onInitSetProvider(\n    providerUrl: string | HttpProvider | WSProvider,\n  ): HttpProvider | WSProvider {\n    if (typeof providerUrl === 'string') {\n      return isHttp(providerUrl)\n        ? new HttpProvider(providerUrl)\n        : isWs(providerUrl)\n        ? new WSProvider(providerUrl)\n        : new HttpProvider(defaultConfig.Default.Chain_URL);\n    }\n    try {\n      const providerType = this.getType(providerUrl);\n      if (providerType === ProviderType.http || providerType === ProviderType.ws) {\n        return providerUrl;\n      } else {\n        throw new Error('cannot get provider type');\n      }\n    } catch (error) {\n      throw error;\n    }\n  }\n  private getType(provider: HttpProvider | WSProvider) {\n    if (provider instanceof HttpProvider) {\n      return ProviderType.http;\n    }\n    if (provider instanceof WSProvider) {\n      return ProviderType.ws;\n    }\n    throw new Error('provider is not correct');\n  }\n}\n","/**\n * @packageDocumentation\n * @module avalanche-network\n * @hidden\n */\n\nimport { RPCResponseBody } from '../types';\nimport { isObject } from 'avalanche-js-utils';\n/**\n * @class ResponseMiddleware\n * @description Response middleware of RPC\n * @param  {Object}  ResponseBody - response from rpc\n * @return {ResponseMiddleware} response middleware instance\n */\nclass ResponseMiddleware {\n  result: any;\n  error: any;\n  raw: any;\n  responseType: string;\n  constructor(ResponseBody: RPCResponseBody<any, any>) {\n    this.result = ResponseBody.result;\n    this.error = ResponseBody.error;\n    this.raw = ResponseBody;\n    this.responseType = this.getResponseType();\n  }\n\n  get getResult() {\n    return isObject(this.result) ? { ...this.result, responseType: 'result' } : this.result;\n  }\n\n  get getError() {\n    return isObject(this.error) ? { ...this.error, responseType: 'error' } : this.error;\n  }\n\n  get getRaw() {\n    return { ...this.raw, responseType: 'raw' };\n  }\n\n  getResponseType(): string {\n    if (this.error) {\n      return 'error';\n    } else if (this.result || (this.result === null && this.result !== undefined)) {\n      return 'result';\n    } else {\n      return 'raw';\n    }\n  }\n\n  isError(): boolean {\n    return this.responseType === 'error';\n  }\n  isResult(): boolean {\n    return this.responseType === 'result';\n  }\n  isRaw(): boolean {\n    return this.responseType === 'raw';\n  }\n}\nexport { ResponseMiddleware };\n","/**\n # avalanche-js-network\n\nThis package provides a collection of apis to create messengers (HTTP, WebSocket) to connect to blockchain networks.\n\n## Installation\n\n```\nnpm install avalanche-js-network\n```\n\n## Usage\n\n```javascript\nconst { Messenger, HttpProvider, WSProvider } = require('avalanche-js-network');\nconst { ChainID, ChainType } = require('avalanche-js-utils');\nconst testnetHTTP = 'https://api.s0.b.hmny.io';\nconst testnetWS = 'wss://ws.s0.b.hmny.io';\nconst localHTTP = 'http://localhost:9500/';\nconst localWS = 'http://localhost:9800/';\nconst http = new HttpProvider(testnetHTTP); // for local use localHTTP\nconst ws = new WSProvider(testnetWS); // for local use testnetWS\nconst customHTTPMessenger = new Messenger(http, ChainType.Avalanche, ChainID.HmyTestnet); // for local ChainID.HmyLocal\nconst customWSMessenger = new Messenger(ws, ChainType.Avalanche, ChainID.HmyTestnet); // for local ChainID.HmyLocal\n```\n *\n * @packageDocumentation\n * @module avalanche-network\n */\n\n/**@ignore */\nexport enum RPCMethod {\n  // 1. hmy_getBlockByHash\n  GetBlockByHash = 'hmy_getBlockByHash',\n  // 2. hmy_getBlockByNumber\n  GetBlockByNumber = 'hmy_getBlockByNumber',\n  // 3. hmy_getBlockTransactionCountByHash\n  GetBlockTransactionCountByHash = 'hmy_getBlockTransactionCountByHash',\n  // 4. hmy_getBlockTransactionCountByNumber\n  GetBlockTransactionCountByNumber = 'hmy_getBlockTransactionCountByNumber',\n  // 5. hmy_getCode\n  GetCode = 'hmy_getCode',\n  // 6. hmy_getTransactionByBlockHashAndIndex\n  GetTransactionByBlockHashAndIndex = 'hmy_getTransactionByBlockHashAndIndex',\n  // 7. hmy_getTransactionByBlockNumberAndIndex\n  GetTransactionByBlockNumberAndIndex = 'hmy_getTransactionByBlockNumberAndIndex',\n  // 8. hmy_getTransactionByHash\n  GetTransactionByHash = 'hmy_getTransactionByHash',\n\n  GetTransactionReceipt = 'hmy_getTransactionReceipt',\n\n  GetCXReceiptByHash = 'hmy_getCXReceiptByHash',\n  // 9. hmy_syncing\n  Syncing = 'hmy_syncing',\n  // 10. net_peerCount\n  PeerCount = 'net_peerCount',\n\n  // 11. hmy_getBalance\n  GetBalance = 'hmy_getBalance',\n  // 12. hmy_getStorageAt\n  GetStorageAt = 'hmy_getStorageAt',\n  // 13. hmy_getTransactionCount\n  GetTransactionCount = 'hmy_getTransactionCount',\n  // 14. hmy_sendTransaction\n  SendTransaction = 'hmy_sendTransaction',\n  // 15. hmy_sendRawTransaction\n  SendRawTransaction = 'hmy_sendRawTransaction',\n  // 16. hmy_subscribe\n  Subscribe = 'hmy_subscribe',\n  // 17. hmy_getlogs\n  GetPastLogs = 'hmy_getLogs',\n  // 18. hmy_getWork\n  GetWork = 'hmy_getWork',\n  // 19. hmy_submitWork\n  // SubmitWork = 'hmy_submitWork',\n  // 20. hmy_getProof\n  GetProof = 'hmy_getProof',\n  // 21, hmy_getFilterChanges\n  GetFilterChanges = 'hmy_getFilterChanges',\n  // 22. hmy_newPendingTransactionFilter\n  NewPendingTransactionFilter = 'hmy_newPendingTransactionFilter',\n  // 23. hmy_newBlockFilter\n  NewBlockFilter = 'hmy_newBlockFilter',\n  // 24. hmy_newFilter\n  NewFilter = 'hmy_newFilter',\n  // 25. hmy_call\n  Call = 'hmy_call',\n  // 26. hmy_estimateGas\n  EstimateGas = 'hmy_estimateGas',\n  // 27. hmy_gasPrice\n  GasPrice = 'hmy_gasPrice',\n  // 28. hmy_blockNumber\n  BlockNumber = 'hmy_blockNumber',\n  // 29. hmy_unsubscribe\n  UnSubscribe = 'hmy_unsubscribe',\n  // 30. net_version\n  NetVersion = 'net_version',\n  // 31. hmy_protocolVersion\n  ProtocolVersion = 'hmy_protocolVersion',\n  // 32. hmy_getShardingStructure\n  GetShardingStructure = 'hmy_getShardingStructure',\n  // 33. hmy_sendRawStakingTransaction\n  SendRawStakingTransaction = 'hmy_sendRawStakingTransaction',\n  // 34. hmy_getAccountNonce\n  GetAccountNonce = 'hmy_getAccountNonce',\n}\n\n/**@ignore */\nexport enum RPCErrorCode {\n  // Standard JSON-RPC 2.0 errors\n  // RPC_INVALID_REQUEST is internally mapped to HTTP_BAD_REQUEST (400).\n  // It should not be used for application-layer errors.\n  RPC_INVALID_REQUEST = -32600,\n  // RPC_METHOD_NOT_FOUND is internally mapped to HTTP_NOT_FOUND (404).\n  // It should not be used for application-layer errors.\n  RPC_METHOD_NOT_FOUND = -32601,\n  RPC_INVALID_PARAMS = -32602,\n  // RPC_INTERNAL_ERROR should only be used for genuine errors in bitcoind\n  // (for example datadir corruption).\n  RPC_INTERNAL_ERROR = -32603,\n  RPC_PARSE_ERROR = -32700,\n\n  // General application defined errors\n  RPC_MISC_ERROR = -1, // std::exception thrown in command handling\n  RPC_TYPE_ERROR = -3, // Unexpected type was passed as parameter\n  RPC_INVALID_ADDRESS_OR_KEY = -5, // Invalid address or key\n  RPC_INVALID_PARAMETER = -8, // Invalid, missing or duplicate parameter\n  RPC_DATABASE_ERROR = -20, // Database error\n  RPC_DESERIALIZATION_ERROR = -22, // Error parsing or validating structure in raw format\n  RPC_VERIFY_ERROR = -25, // General error during transaction or block submission\n  RPC_VERIFY_REJECTED = -26, // Transaction or block was rejected by network rules\n  RPC_IN_WARMUP = -28, // Client still warming up\n  RPC_METHOD_DEPRECATED = -32, // RPC method is deprecated\n}\n","/**\n * @packageDocumentation\n * @module avalanche-network\n */\n\nimport { AvalancheCore, ChainType, isString, ChainID, defaultConfig } from 'avalanche-js-utils';\nimport { JsonRpc } from '../rpcMethod/builder';\nimport { ResponseMiddleware } from './responseMiddleware';\nimport { HttpProvider } from '../providers/http';\nimport { WSProvider } from '../providers/ws';\n// import { getResultForData } from '../util';\nimport { RPCMethod } from '../rpcMethod/rpc';\nimport { SubscribeReturns, ShardingItem } from '../types';\n\n/** @hidden */\nexport interface ShardingProvider {\n  current: boolean;\n  shardID: number;\n  http: string;\n  ws: string;\n}\n\n/**\n * ## How to Create a Massage\n * @example\n * ```\n * const { HttpProvider, Messenger } = require('avalanche-js-network');\n * const { ChainType, ChainID } = require('avalanche-js-utils');\n *\n * // create a custom messenger\n * const customMessenger = new Messenger(\n *   new HttpProvider('http://localhost:9500'),\n *   ChainType.Avalanche, // if you are connected to Avalanche's blockchain\n *   ChainID.HmyLocal, // check if the chainId is correct\n * )\n * ```\n */\nclass Messenger extends AvalancheCore {\n  provider: HttpProvider | WSProvider;\n  config?: object;\n  // tslint:disable-next-line: variable-name\n  Network_ID: string = 'Default';\n  shardProviders: Map<number, ShardingProvider>;\n\n  JsonRpc: JsonRpc;\n  defaultShardID?: number;\n\n  constructor(\n    provider: HttpProvider | WSProvider,\n    chainType: ChainType = defaultConfig.Default.Chain_Type,\n    chainId: ChainID = defaultConfig.Default.Chain_ID,\n    config: object = defaultConfig,\n  ) {\n    super(chainType, chainId);\n\n    /**\n     * @var {Provider} provider\n     * @memberof Messenger.prototype\n     * @description Provider instance\n     */\n    this.provider = provider;\n\n    /**\n     * @var {Object} config\n     * @memberof Messenger.prototype\n     * @description Messenger config\n     */\n    this.config = config;\n    /**\n     * @var {Number} Network_ID\n     * @memberof Messenger.prototype\n     * @description Network ID for current provider\n     */\n\n    /**\n     * @var {JsonRpc} JsonRpc\n     * @memberof Messenger.prototype\n     * @description JsonRpc instance\n     */\n    this.JsonRpc = new JsonRpc();\n\n    // set Network ID\n    this.setNetworkID(defaultConfig.Default.Network_ID);\n\n    // set shardingProviders\n\n    this.shardProviders = new Map();\n    // this.setShardingProviders();\n  }\n\n  /**\n   * @example\n   * ```\n   * customMessenger.currentShard\n   * ```\n   */\n  get currentShard(): number {\n    return this.getCurrentShardID() || this.defaultShardID || 0;\n  }\n\n  /**\n   * @example\n   * ```\n   * customMessenger.shardCount\n   * ```\n   */\n  get shardCount(): number {\n    return this.shardProviders.size;\n  }\n\n  /**\n   * @function send\n   * @memberof Messenger.prototype\n   * @param  {String} method - RPC method\n   * @param  {Object} params - RPC method params\n   * @return {Object} RPC result\n   */\n  send = async (\n    method: RPCMethod | string,\n    params?: string | any[] | undefined,\n    rpcPrefix?: string,\n    shardID: number = this.currentShard,\n  ) => {\n    this.providerCheck();\n    let rpcMethod = method;\n    if (rpcPrefix && isString(rpcPrefix) && rpcPrefix !== this.chainPrefix) {\n      rpcMethod = this.setRPCPrefix(method, rpcPrefix);\n    } else if (!rpcPrefix || rpcPrefix === this.chainPrefix) {\n      rpcMethod = this.setRPCPrefix(method, this.chainPrefix);\n    }\n    try {\n      const payload = this.JsonRpc.toPayload(rpcMethod, params);\n      const provider = this.getShardProvider(shardID);\n      this.setResMiddleware(\n        (data: any) => {\n          if (!(data instanceof ResponseMiddleware)) {\n            return new ResponseMiddleware(data);\n          } else {\n            return data;\n          }\n        },\n        '*',\n        provider,\n      );\n\n      const result = await provider.send(payload);\n      return result;\n      // return getResultForData(result); // getResultForData(result)\n    } catch (e) {\n      throw new Error(e);\n    }\n  };\n\n  /**\n   * @function setProvider\n   * @memberof Messenger\n   * @description provider setter\n   * @param  {Provider} provider - provider instance\n   */\n  setProvider(provider: HttpProvider | WSProvider) {\n    this.provider = provider;\n  }\n\n  /**\n   * @function providerCheck\n   * @memberof Messenger\n   * @description provider checker\n   * @return {Error|null} provider validator\n   */\n  providerCheck() {\n    if (!this.provider) {\n      throw new Error('provider is not found');\n    }\n  }\n\n  /**\n   * @function setReqMiddleware\n   * @description set request middleware\n   * @memberof Messenger\n   * @param  {any} middleware - middle ware for req\n   * @param  {String} method  - method name\n   * @hidden\n   */\n  setReqMiddleware(middleware: any, method = '*', provider: HttpProvider | WSProvider) {\n    provider.middlewares.request.use(middleware, method);\n  }\n\n  /**\n   * @function setResMiddleware\n   * @description set response middleware\n   * @memberof Messenger\n   * @param  {any} middleware - middle ware for req\n   * @param  {String} method  - method name\n   * @hidden\n   */\n  setResMiddleware(middleware: any, method = '*', provider: HttpProvider | WSProvider) {\n    provider.middlewares.response.use(middleware, method);\n  }\n\n  /**\n   * @function setNetworkID\n   * @description set network id\n   * @memberof Messenger\n   * @param  {String} id network id string\n   */\n  setNetworkID(id: string) {\n    this.Network_ID = id;\n  }\n\n  setRPCPrefix(method: RPCMethod | string, prefix: string): string {\n    const stringArray: string[] = method.split('_');\n    if (stringArray.length !== 2) {\n      throw new Error(`could not set prefix with ${method}`);\n    }\n    stringArray[0] = prefix;\n    return stringArray.join('_');\n  }\n\n  subscribe = async (\n    method: RPCMethod | string,\n    params?: string | any[] | undefined,\n    returnType: SubscribeReturns = SubscribeReturns.all,\n    rpcPrefix: string = this.chainPrefix,\n    shardID: number = this.currentShard,\n  ) => {\n    let rpcMethod = method;\n    if (rpcPrefix && isString(rpcPrefix) && rpcPrefix !== this.chainPrefix) {\n      rpcMethod = this.setRPCPrefix(method, rpcPrefix);\n    } else if (!rpcPrefix || rpcPrefix === this.chainPrefix) {\n      rpcMethod = this.setRPCPrefix(method, this.chainPrefix);\n    }\n    let id: any = null;\n    const provider = this.getShardProvider(shardID);\n    if (provider instanceof WSProvider) {\n      const reProvider = provider;\n\n      try {\n        const payload = this.JsonRpc.toPayload(rpcMethod, params);\n        id = await reProvider.subscribe(payload);\n        reProvider.on(id, (result: any) => {\n          reProvider.emitter.emit('data', result);\n        });\n        reProvider.once('error', (error) => {\n          reProvider.removeEventListener(id);\n          reProvider.emitter.emit('error', error);\n          reProvider.removeEventListener('*');\n        });\n      } catch (error) {\n        reProvider.emitter.emit('error', error);\n        reProvider.removeEventListener('*');\n      }\n      if (returnType === SubscribeReturns.all) {\n        return [reProvider, id];\n      } else if (returnType === SubscribeReturns.method) {\n        return reProvider;\n      } else if (returnType === SubscribeReturns.id) {\n        return id;\n      } else {\n        throw new Error('Invalid returns');\n      }\n    } else {\n      throw new Error('HttpProvider does not support this');\n    }\n  };\n\n  unsubscribe = async (\n    method: RPCMethod | string,\n    params?: string | any[] | undefined,\n    rpcPrefix?: string,\n    shardID: number = this.currentShard,\n  ) => {\n    let rpcMethod = method;\n    if (rpcPrefix && isString(rpcPrefix) && rpcPrefix !== this.chainPrefix) {\n      rpcMethod = this.setRPCPrefix(method, rpcPrefix);\n    } else if (!rpcPrefix || rpcPrefix === this.chainPrefix) {\n      rpcMethod = this.setRPCPrefix(method, this.chainPrefix);\n    }\n    const provider = this.getShardProvider(shardID);\n    if (provider instanceof WSProvider) {\n      const reProvider = this.provider;\n      try {\n        const payload = this.JsonRpc.toPayload(rpcMethod, params);\n        const response = await reProvider.unsubscribe(payload);\n        return response;\n      } catch (error) {\n        throw error;\n      }\n    } else {\n      throw new Error('HttpProvider does not support this');\n    }\n  };\n\n  async setShardingProviders() {\n    if (this.chainPrefix !== ChainType.Avalanche) {\n      return;\n    }\n    try {\n      const response = await this.send(RPCMethod.GetShardingStructure, [], this.chainPrefix);\n\n      if (response.result) {\n        const shardingStructures: ShardingItem[] = response.result;\n        for (const shard of shardingStructures) {\n          const shardID =\n            typeof shard.shardID === 'string' ? Number.parseInt(shard.shardID, 10) : shard.shardID;\n          this.shardProviders.set(shardID, {\n            current: shard.current,\n            shardID,\n            http: shard.http,\n            ws: shard.ws,\n          });\n        }\n      }\n    } catch (error) {\n      return;\n    }\n  }\n\n  /**\n   * @example\n   * ```\n   * hmy.messenger.getShardProvider()\n   * ```\n   */\n  getShardProvider(shardID: number): HttpProvider | WSProvider {\n    const provider = this.shardProviders.get(shardID);\n    if (provider) {\n      return this.provider instanceof HttpProvider\n        ? new HttpProvider(provider.http)\n        : new WSProvider(provider.ws);\n    }\n    return this.provider;\n  }\n\n  /**\n   * @example\n   * ```\n   * hmy.messenger.getCurrentShardID()\n   * ```\n   */\n\n  getCurrentShardID() {\n    for (const shard of this.shardProviders) {\n      if (\n        shard[1].current === true ||\n        shard[1].http === this.provider.url ||\n        shard[1].ws === this.provider.url\n      ) {\n        return shard[1].shardID;\n      }\n    }\n  }\n  setDefaultShardID(shardID: number) {\n    this.defaultShardID = shardID;\n  }\n}\nexport { Messenger };\n","/**\n * @packageDocumentation\n * @module avalanche-network\n * @hidden\n */\n\nimport { isHex, hexToNumber } from 'avalanche-js-utils';\nimport { Emitter } from '../providers/emitter';\n\nconst sec = 1000;\n\nconst calculateSum = (accumulator: number, currentValue: number) => accumulator + currentValue;\nconst blockTrackerEvents = ['sync', 'latest'];\n\nexport class BaseBlockTracker extends Emitter {\n  // tslint:disable-next-line: variable-name\n  _blockResetDuration?: number;\n  // tslint:disable-next-line: variable-name\n  _blockResetTimeout: any;\n  // tslint:disable-next-line: variable-name\n  _currentBlock: any;\n  // tslint:disable-next-line: variable-name\n  _isRunning: boolean;\n  constructor(\n    opts: any = {\n      blockResetDuration: undefined,\n      retryTimeout: undefined,\n      keepEventLoopActive: undefined,\n      setSkipCacheFlag: false,\n    },\n  ) {\n    super();\n    // config\n    this._blockResetDuration = opts.blockResetDuration || 20 * sec;\n    // state\n    // tslint:disable-next-line: no-unused-expression\n    this._blockResetTimeout;\n    this._currentBlock = null;\n    this._isRunning = false;\n    // bind functions for internal use\n    // this._onNewListener = this._onNewListener.bind(this);\n    // this._onRemoveListener = this._onRemoveListener.bind(this);\n    // this._resetCurrentBlock = this._resetCurrentBlock.bind(this);\n    // listen for handler changes\n    // this._setupInternalEvents();\n    this._maybeStart();\n  }\n\n  isRunning() {\n    return this._isRunning;\n  }\n\n  getCurrentBlock() {\n    return this._currentBlock;\n  }\n\n  async getLatestBlock() {\n    // return if available\n    if (this._currentBlock) {\n      return this._currentBlock;\n    }\n    // wait for a new latest block\n    const latestBlock = await new Promise((resolve) => this.once('latest', resolve));\n    // return newly set current block\n    return latestBlock;\n  }\n\n  // dont allow module consumer to remove our internal event listeners\n  removeAllListeners(eventName: string) {\n    // perform default behavior, preserve fn arity\n    if (eventName) {\n      super.removeEventListener(eventName);\n    } else {\n      super.removeEventListener('*');\n    }\n    // re-add internal events\n    this._setupInternalEvents();\n    // trigger stop check just in case\n    this._onRemoveListener('*');\n  }\n\n  //\n  // to be implemented in subclass\n  //\n\n  _start() {\n    // default behavior is noop\n  }\n\n  _end() {\n    // default behavior is noop\n  }\n\n  //\n  // private\n  //\n\n  _setupInternalEvents() {\n    // first remove listeners for idempotence\n    this.removeEventListener('newListener', this._onNewListener);\n    this.removeEventListener('removeListener', this._onRemoveListener);\n    // then add them\n\n    this.on('newListener', this._onNewListener);\n    this.on('removeListener', this._onRemoveListener);\n  }\n\n  _onNewListener(eventName: string, handler?: mitt.Handler) {\n    // `newListener` is called *before* the listener is added\n    if (!blockTrackerEvents.includes(eventName)) {\n      return;\n    }\n\n    this._maybeStart();\n  }\n\n  _onRemoveListener(eventName: string, handler?: mitt.Handler) {\n    // `removeListener` is called *after* the listener is removed\n    if (this._getBlockTrackerEventCount() > 0) {\n      return;\n    }\n    this._maybeEnd();\n  }\n\n  _maybeStart() {\n    if (this._isRunning) {\n      return;\n    }\n    this._isRunning = true;\n    // cancel setting latest block to stale\n    this._cancelBlockResetTimeout();\n    this._start();\n  }\n\n  _maybeEnd() {\n    if (!this._isRunning) {\n      return;\n    }\n    this._isRunning = false;\n    this._setupBlockResetTimeout();\n    this._end();\n  }\n\n  _getBlockTrackerEventCount() {\n    return blockTrackerEvents\n      .map((eventName) => this.listenerCount(eventName))\n      .reduce(calculateSum);\n  }\n\n  _newPotentialLatest(newBlock: string) {\n    const currentBlock = this._currentBlock;\n    // only update if blok number is higher\n    if (\n      currentBlock &&\n      isHex(currentBlock) &&\n      isHex(newBlock) &&\n      hexToNumber(newBlock) <= hexToNumber(currentBlock)\n    ) {\n      return;\n    }\n    this._setCurrentBlock(newBlock);\n  }\n\n  _setCurrentBlock(newBlock: string) {\n    const oldBlock = this._currentBlock;\n    this._currentBlock = newBlock;\n    this.emit('latest', newBlock);\n    this.emit('sync', { oldBlock, newBlock });\n  }\n\n  _setupBlockResetTimeout() {\n    // clear any existing timeout\n    this._cancelBlockResetTimeout();\n    // clear latest block when stale\n    this._blockResetTimeout = setTimeout(this._resetCurrentBlock, this._blockResetDuration);\n    // nodejs - dont hold process open\n    if (this._blockResetTimeout.unref) {\n      this._blockResetTimeout.unref();\n    }\n  }\n\n  _cancelBlockResetTimeout() {\n    clearTimeout(this._blockResetTimeout);\n  }\n\n  _resetCurrentBlock() {\n    this._currentBlock = null;\n  }\n}\n","/**\n * @packageDocumentation\n * @module avalanche-network\n * @hidden\n */\n\nimport { BaseBlockTracker } from './baseTracker';\nimport { Messenger } from '../messenger/messenger';\nimport { RPCMethod } from '../rpcMethod/rpc';\n\nconst sec = 1000;\n\nexport function timeout(duration: number, unref: any) {\n  return new Promise((resolve) => {\n    const timoutRef: any = setTimeout(resolve, duration);\n    // don't keep process open\n    if (timoutRef.unref && unref) {\n      timoutRef.unref();\n    }\n  });\n}\nexport class PollingBlockTracker extends BaseBlockTracker {\n  messenger: Messenger;\n  // tslint:disable-next-line: variable-name\n  _pollingInterval: number;\n  // tslint:disable-next-line: variable-name\n  _retryTimeout: number;\n  // tslint:disable-next-line: variable-name\n  _keepEventLoopActive: boolean;\n  // tslint:disable-next-line: variable-name\n  _setSkipCacheFlag: boolean;\n  constructor(\n    messenger: Messenger,\n    opts = {\n      pollingInterval: undefined,\n      retryTimeout: undefined,\n      keepEventLoopActive: false,\n      setSkipCacheFlag: false,\n    },\n  ) {\n    // parse + validate args\n    if (!messenger) {\n      throw new Error('PollingBlockTracker - no provider specified.');\n    }\n\n    const pollingInterval: number = opts.pollingInterval || 20 * sec;\n    const retryTimeout: number = opts.retryTimeout || pollingInterval / 10;\n    const keepEventLoopActive: boolean =\n      opts.keepEventLoopActive !== undefined ? opts.keepEventLoopActive : true;\n    const setSkipCacheFlag = opts.setSkipCacheFlag || false;\n    // BaseBlockTracker constructor\n    super({\n      blockResetDuration: pollingInterval,\n      retryTimeout,\n      keepEventLoopActive,\n      setSkipCacheFlag,\n    });\n    // config\n    this.messenger = messenger;\n    this._pollingInterval = pollingInterval;\n    this._retryTimeout = retryTimeout;\n    this._keepEventLoopActive = keepEventLoopActive;\n    this._setSkipCacheFlag = setSkipCacheFlag;\n  }\n\n  //\n  // public\n  //\n\n  // trigger block polling\n  async checkForLatestBlock() {\n    await this._updateLatestBlock();\n    const result = await this.getLatestBlock();\n    return result;\n  }\n\n  //\n  // private\n  //\n\n  _start() {\n    this._performSync().catch((err) => this.emit('error', err));\n  }\n\n  async _performSync() {\n    while (this._isRunning) {\n      try {\n        await this._updateLatestBlock();\n        await timeout(this._pollingInterval, !this._keepEventLoopActive);\n      } catch (err) {\n        const newErr = new Error(\n          `PollingBlockTracker - encountered an error while attempting to update latest block:\\n${err.stack}`,\n        );\n        try {\n          this.emit('error', newErr);\n        } catch (emitErr) {\n          console.error(newErr);\n        }\n        await timeout(this._retryTimeout, !this._keepEventLoopActive);\n      }\n    }\n  }\n\n  async _updateLatestBlock() {\n    // fetch + set latest block\n    const latestBlock = await this._fetchLatestBlock();\n    this._newPotentialLatest(latestBlock);\n  }\n\n  async _fetchLatestBlock() {\n    try {\n      const result = await this.messenger.send(RPCMethod.BlockNumber, []);\n      if (result.isError()) {\n        throw result.message;\n      } else if (result.isResult()) {\n        return result.result;\n      }\n    } catch (error) {\n      throw error;\n    }\n  }\n}\n","/**\n * @packageDocumentation\n * @module avalanche-network\n * @hidden\n */\n\nimport { Messenger } from '../messenger/messenger';\nimport { WSProvider } from '../providers/ws';\nimport { BaseBlockTracker } from './baseTracker';\nimport { RPCMethod } from '../rpcMethod/rpc';\n\nexport class SubscribeBlockTracker extends BaseBlockTracker {\n  messenger: Messenger;\n  subscriptionId: any;\n  // tslint:disable-next-line: variable-name\n\n  constructor(messenger: Messenger, opts = {}) {\n    // parse + validate args\n    if (!messenger) {\n      throw new Error('SubscribeBlockTracker - no provider specified.');\n    }\n    if (!(messenger.provider instanceof WSProvider)) {\n      throw new Error('This provider not supported');\n    }\n    // BaseBlockTracker constructor\n    super(opts);\n    // config\n    this.messenger = messenger;\n    this.subscriptionId = null;\n  }\n\n  async checkForLatestBlock() {\n    const result = await this.getLatestBlock();\n    return result;\n  }\n\n  async _start() {\n    try {\n      const blockNumber = await this.messenger.send(RPCMethod.BlockNumber, []);\n\n      if (blockNumber.isError()) {\n        throw blockNumber.message;\n      } else if (blockNumber.isResult()) {\n        const subs = await this.messenger.subscribe(RPCMethod.Subscribe, ['newHeads']);\n        this.subscriptionId = subs;\n        subs[0].onData(this._handleSubData);\n\n        this._newPotentialLatest(blockNumber);\n      }\n    } catch (error) {\n      this.emit('error', error);\n    }\n  }\n\n  async _end() {\n    if (this.subscriptionId != null) {\n      this.messenger.unsubscribe(RPCMethod.UnSubscribe, [this.subscriptionId]);\n      delete this.subscriptionId;\n    }\n  }\n\n  _handleSubData(data: any) {\n    if (\n      // data.method === 'eth_subscription' &&\n      data.params.subscription === this.subscriptionId\n    ) {\n      this._newPotentialLatest(data.params.result.number);\n    }\n  }\n}\n","/**\n * @packageDocumentation\n * @module avalanche-network\n */\n\nimport { Messenger } from '../messenger/messenger';\nimport { RPCMethod } from '../rpcMethod/rpc';\nimport { WSProvider } from '../providers/ws';\nimport { RPCRequestPayload } from '../types';\n\nexport class SubscriptionMethod extends WSProvider {\n  param: any;\n  options: any;\n  shardID: number;\n  messenger: Messenger;\n\n  subscriptionId: any = null;\n  constructor(param: any, options: any, messenger: Messenger, shardID: number = 0) {\n    super(shardID !== 0 ? messenger.getShardProvider(shardID).url : messenger.provider.url);\n    this.shardID = shardID;\n    this.param = param;\n    this.options = options;\n    this.messenger = messenger;\n  }\n\n  constructPayload(method: string, param: any, options?: any): RPCRequestPayload<any> {\n    let rpcMethod = method;\n    const payload: any = [];\n    payload.push(param);\n    if (options) {\n      payload.push(options);\n    }\n    rpcMethod = this.messenger.setRPCPrefix(method, this.messenger.chainPrefix);\n    return this.jsonRpc.toPayload(rpcMethod, payload);\n  }\n\n  async start() {\n    const subscribePayload = this.constructPayload(RPCMethod.Subscribe, this.param, this.options);\n    try {\n      const id = await super.subscribe(subscribePayload);\n      this.subscriptionId = id;\n      this.on(id, (result: any) => {\n        const output = this.onNewSubscriptionItem(result);\n\n        this.emitter.emit('data', output);\n      });\n      this.once('error', (error) => {\n        this.removeEventListener(id);\n        this.emitter.emit('error', error);\n        this.removeEventListener('*');\n      });\n    } catch (error) {\n      this.emitter.emit('error', error);\n      this.removeEventListener('*');\n    }\n    return this;\n  }\n  unsubscribe() {\n    const unsubscribePayload = this.constructPayload(RPCMethod.UnSubscribe, this.subscriptionId);\n    return super.unsubscribe(unsubscribePayload);\n  }\n  onNewSubscriptionItem(subscriptionItem: any) {\n    return subscriptionItem;\n  }\n}\n","/**\n * @packageDocumentation\n * @module avalanche-network\n */\n\nimport { Messenger } from '../messenger/messenger';\nimport { SubscriptionMethod } from './Subscription';\nimport { RPCMethod } from '../rpcMethod/rpc';\n\nexport class LogSub extends SubscriptionMethod {\n  constructor(options: any, messenger: Messenger, shardID: number = 0) {\n    super('logs', options, messenger, shardID);\n    this.preprocess();\n  }\n\n  async preprocess() {\n    if (\n      (this.options.fromBlock && this.options.fromBlock !== 'latest') ||\n      this.options.fromBlock === 0 ||\n      this.options.fromBlock === '0x'\n    ) {\n      try {\n        const getPastLogs = await this.messenger.send(\n          RPCMethod.GetPastLogs,\n          [...this.options],\n          this.messenger.chainType,\n          this.shardID,\n        );\n\n        if (getPastLogs.isError()) {\n          this.emitter.emit('error', getPastLogs.error.message);\n        } else {\n          const logs = getPastLogs.result;\n          logs.forEach((log: any) => {\n            const formattedLog = this.onNewSubscriptionItem(log);\n            this.emitter.emit('data', formattedLog);\n          });\n        }\n        delete this.options.fromBlock;\n        // const sub = this.start();\n        return this.start();\n      } catch (error) {\n        this.emitter.emit('error', error);\n        throw error;\n      }\n    }\n    return this.start();\n  }\n\n  onNewSubscriptionItem(subscriptionItem: any) {\n    // todo log formatter\n    const log = subscriptionItem;\n\n    if (log.removed) {\n      this.emitter.emit('changed', log);\n    }\n\n    return log;\n  }\n  // todo formatter\n}\n","/**\n * @packageDocumentation\n * @module avalanche-network\n */\n\nimport { Messenger } from '../messenger/messenger';\nimport { SubscriptionMethod } from './Subscription';\n\n/**\n * ### Description:\n * Subscribes to incoming block headers. This can be used as timer to check for changes on the blockchain.\n */\nexport class NewHeaders extends SubscriptionMethod {\n  constructor(messenger: Messenger, shardID: number = 0) {\n    super('newHeads', undefined, messenger, shardID);\n    this.start();\n  }\n}\n","/**\n * @packageDocumentation\n * @module avalanche-network\n */\n\nimport { Messenger } from '../messenger/messenger';\nimport { SubscriptionMethod } from './Subscription';\n\n/**\n * ### Description:\n * Subscribes to incoming pending transactions\n */\nexport class NewPendingTransactions extends SubscriptionMethod {\n  constructor(messenger: Messenger, shardID: number = 0) {\n    super('newPendingTransactions', undefined, messenger, shardID);\n    this.start();\n  }\n}\n","/**\n * @packageDocumentation\n * @module avalanche-network\n * @hidden\n */\n\nimport { Messenger } from '../messenger/messenger';\nimport { SubscriptionMethod } from './Subscription';\n\nexport class Syncing extends SubscriptionMethod {\n  isSyncing: boolean | null;\n  constructor(messenger: Messenger, shardID: number = 0) {\n    super('syncing', undefined, messenger, shardID);\n    this.isSyncing = null;\n    this.start();\n  }\n\n  onNewSubscriptionItem(subscriptionItem: any) {\n    const isSyncing = subscriptionItem.params.result.syncing;\n\n    if (this.isSyncing === null) {\n      this.isSyncing = isSyncing;\n      this.emitter.emit('changed', this.isSyncing);\n    }\n\n    if (this.isSyncing === true && isSyncing === false) {\n      this.isSyncing = isSyncing;\n      this.emitter.emit('changed', this.isSyncing);\n    }\n\n    if (this.isSyncing === false && isSyncing === true) {\n      this.isSyncing = isSyncing;\n      this.emitter.emit('changed', this.isSyncing);\n    }\n    // todo formatter\n    return subscriptionItem;\n  }\n}\n","/**\n * @packageDocumentation\n * @module avalanche-network\n * @hidden\n */\n\nimport { ResponseMiddleware } from './messenger/responseMiddleware';\n\n/**\n * @function getResultForData\n * @description get result for data by default\n * @param  {any} data - object get from provider\n * @return {any} data result or data\n */\nexport function getResultForData(data: any): any {\n  if (data.result) {\n    return data.getResult;\n  }\n  if (data.error) {\n    return data.getError;\n  }\n  return data.getRaw;\n}\n\nexport function getRawForData(data: any): any {\n  return data.getRaw;\n}\n\nexport function onResponse(response: ResponseMiddleware) {\n  if (response.responseType === 'result') {\n    return response.getResult;\n  } else if (response.responseType === 'error') {\n    return response.getError;\n  } else {\n    return response.raw;\n  }\n}\n"],"names":["MiddlewareType","SubscribeReturns","BaseProvider","url","reqMiddleware","resMiddleware","Map","request","use","fn","match","pushMiddleware","REQ","response","RES","set","type","Error","current","get","getMiddleware","method","requests","responses","entries","key","transformers","push","RegExp","test","SocketConnection","SocketState","EmittType","BaseSocket","isWs","emitter","mitt","handlers","resetHandlers","i","once","handler","on","removeEventListener","addEventListener","off","reset","removeAllSocketListeners","SOCKET_MESSAGE","SOCKET_READY","SOCKET_CLOSE","SOCKET_ERROR","SOCKET_CONNECT","onReady","event","emit","READY","onError","error","ERROR","onClose","CLOSE","fetchRPC","requestHandler","headers","fetch","options","cache","mode","redirect","referrer","body","JSON","stringify","payload","responseHandler","json","then","req","DEFAULT_TIMEOUT","DEFAULT_HEADERS","_fetch","fetchPromise","timeout","abortFn","abortPromise","Promise","resolve","reject","abortablePromise","race","setTimeout","performRPC","fetcher","composeMiddleware","fns","length","arg","reduce","a","b","defaultOptions","user","password","HttpProvider","send","callback","requestFunc","sendServer","endpoint","tReq","tRes","obj","optionsHandler","endpointHandler","payloadHandler","data","callbackHandler","undefined","AUTH_TOKEN","Buffer","from","toString","Authorization","cb","subscribe","unsubscribe","JsonRpc","params","messageId","sendParams","jsonrpc","id","WSProvider","connection","createWebsocketProvider","jsonRpc","subscriptions","registerEventListeners","onData","code","reconnect","closeEvent","wasClean","window","WebSocket","protocol","urlObject","URL","authorization","username","authToken","W3CWebsocket","clientConfig","isConnecting","readyState","CONNECTING","connected","CONNECT","responseValidateResult","validate","result","subscribeMethod","parameters","subscriptionId","hasSubscription","getSubscriptionEvent","clearSubscriptions","unsubscribeMethod","unsubscribePromises","Object","keys","forEach","toPayload","all","results","includes","onmessage","onMessage","bind","onopen","onConnect","onclose","onerror","msg","isObject","parse","isArray","subscription","subscriptionKeys","message","OPEN","Emitter","promise","e","listenerCount","listenKey","count","val","ProviderType","Provider","provider","onInitSetProvider","providerType","getType","getProvider","providerUrl","isHttp","defaultConfig","Default","Chain_URL","http","ws","ResponseMiddleware","ResponseBody","raw","responseType","getResponseType","isError","isResult","isRaw","RPCMethod","RPCErrorCode","Messenger","chainType","chainId","config","Chain_Type","Chain_ID","rpcPrefix","shardID","currentShard","providerCheck","rpcMethod","isString","chainPrefix","setRPCPrefix","getShardProvider","setResMiddleware","returnType","reProvider","setNetworkID","Network_ID","shardProviders","setProvider","setReqMiddleware","middleware","middlewares","prefix","stringArray","split","join","setShardingProviders","ChainType","Avalanche","GetShardingStructure","shardingStructures","shard","Number","parseInt","getCurrentShardID","setDefaultShardID","defaultShardID","size","AvalancheCore","sec","calculateSum","accumulator","currentValue","blockTrackerEvents","BaseBlockTracker","opts","blockResetDuration","retryTimeout","keepEventLoopActive","setSkipCacheFlag","_blockResetDuration","_currentBlock","_isRunning","_maybeStart","isRunning","getCurrentBlock","getLatestBlock","latestBlock","removeAllListeners","eventName","_setupInternalEvents","_onRemoveListener","_start","_end","_onNewListener","_getBlockTrackerEventCount","_maybeEnd","_cancelBlockResetTimeout","_setupBlockResetTimeout","map","_newPotentialLatest","newBlock","currentBlock","isHex","hexToNumber","_setCurrentBlock","oldBlock","_blockResetTimeout","_resetCurrentBlock","unref","clearTimeout","duration","timoutRef","PollingBlockTracker","messenger","pollingInterval","_pollingInterval","_retryTimeout","_keepEventLoopActive","_setSkipCacheFlag","checkForLatestBlock","_updateLatestBlock","_performSync","err","newErr","stack","emitErr","console","_fetchLatestBlock","BlockNumber","SubscribeBlockTracker","blockNumber","Subscribe","subs","_handleSubData","UnSubscribe","number","SubscriptionMethod","param","constructPayload","start","subscribePayload","output","onNewSubscriptionItem","unsubscribePayload","subscriptionItem","LogSub","preprocess","fromBlock","GetPastLogs","getPastLogs","logs","log","formattedLog","removed","NewHeaders","NewPendingTransactions","Syncing","isSyncing","syncing","getResultForData","getResult","getError","getRaw","getRawForData","onResponse"],"mappings":"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"}